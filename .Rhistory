install.packages('usethis')
usethis::creat_project('inflacao')
usethis::create_project('inflacao')
3
usethis::create_project('inflacao')
usethis::create_project("inflacao")
usethis::create_project("inflacao")
setwd("/cloud/project/inflacao")
# Carregar pacotes
Library(rbcb)
# Coleta via API da SGS/BCB
dados_brutos <- rbcb::get_series(code=c('igpm'=189,'ipgdi'=190,'ipca'=433, 'inpc'=188,'ipcbr'=191),
start_date='2000-01-01',
as = 'tibble'
)
# Carregar pacotes
library(rbcb)
# Carregar pacotes
library(rbcb)
# Coleta via API da SGS/BCB
dados_brutos <- rbcb::get_series(code=c('igpm'=189,'ipgdi'=190,'ipca'=433, 'inpc'=188,'ipcbr'=191),
start_date='2000-01-01',
as = 'tibble'
)
library(purr)
install.packages('purr')
install.packages('purrr')
install.packages("purrr")
# Carregar pacotes
library(rbcb)
library(purrr)
library(dplyr)
# Coleta via API da SGS/BCB
dados_brutos <- rbcb::get_series(code=c('igpm'=189,'ipgdi'=190,'ipca'=433, 'inpc'=188,'ipcbr'=191),
start_date='2000-01-01',
as = 'tibble'
)
# Tratamentos das tabelas
dados_tratados <- purrr::reduce(
.x = dados_brutos,
.f = dplyr::full_join,
by = 'date'
)
View(dados_tratados)
# Tratamentos das tabelas
dados_tratados <- purrr::reduce(
.x = dados_brutos,
.f = dplyr::full_join,
by = 'date'
) |>
dplyr::arrange(date)
library(readr)
# Salvar tabelas como CSV
readr::write_csv(x=dados_tratados,file='dados_tratados.csv')
install.packages('readr')
library(readr)
# Salvar tabelas como CSV
readr::write_csv(x=dados_tratados,file='dados_tratados.csv')
install.packages('flexdashboard')
View(dados_tratados)
# Carregar pacotes
library(rbcb)
library(purrr)
library(dplyr)
library(readr)
# Coleta via API da SGS/BCB
dados_brutos <- rbcb::get_series(code=c('IGP-M'=189,'IGP-DI'=190,'IPCA'=433, 'INPC'=188,'IPC-Br'=191),
start_date='2000-01-01',
as = 'tibble'
)
# Tratamentos das tabelas
dados_tratados <- purrr::reduce(
.x = dados_brutos,
.f = dplyr::full_join,
by = 'date'
) |>
dplyr::arrange(date)
# Salvar tabelas como CSV
readr::write_csv(x=dados_tratados,file='dados_tratados.csv')
---
title: "Diagnóstico da Inflação"
```{r global, include=FALSE}
# Carrega dados
dados <- readr::read_csv("dados_tratados.csv")
Column {.sidebar}
# Carrega dados
dados <- readr::read_csv("dados_tratados.csv")
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
# Carregar pacotes
library(rbcb)
library(purrr)
library(dplyr)
library(readr)
# Coleta via API da SGS/BCB
dados_brutos <- rbcb::get_series(code=c('IGP-M'=189,'IGP-DI'=190,'IPCA'=433, 'INPC'=188,'IPC-Br'=191),
start_date='2000-01-01',
as = 'tibble'
)
# Tratamentos das tabelas
dados_tratados <- purrr::reduce(
.x = dados_brutos,
.f = dplyr::full_join,
by = 'date'
) |>
dplyr::arrange(date)
# Salvar tabelas como CSV
readr::write_csv(x=dados_tratados,file='dados_tratados.csv')
# Carrega pacotes
library(readr)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
View(dados)
?shinyinput
INSTAL
install.packages('lubridate')
library(lubridate)
shiny::numericInput ?
shiny::numericInput??
??shiny::numericInput
??nameUI <- function(id) {
ns <- NS(id)
tagList(
)
}
install.packages("ggplot")
install.packages("ggplot2")
---
title: "Diagnóstico da Inflação"
library(ggplot2)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
# Inputs
shiny::selectInput(
inputId = "indicador",
label = shiny::strong("indicador"),
choices = colnames(dados)[-1],
selected='IPCA',
multiple = FALSE
)
shiny::dateRangeInput(
inputId="datas",
label=shiny::strong("Data inicial e final:"),
start=dados$date[1],
end=max(dados$date),
min=dados$date[1],
max=max(dados$date),
format="mm/yyyy",
startview = "year",
language="pt-BR",
separator=" - "
)
shiny::numericInput(
inputId="ano",
label=shiny::strong("Comparar com o ano"),
value=max(lubridate::year(dados$date)),
min=min(lubridate::year(dados$date)),
max=max(lubridate::year(dados$date)),
step=1L
)
shiny::checkboxGroupInput(
inputId="Componentes",
label=shiny::strong("Componentes"),
choices=c("% a.m.","Tendência","Sazonalidade","Média"),
selected=c("% a.m.","Tendência","Média")
)
prepara_componentes <- shiny::reactive({
dados |>
dplyr::select("date", "indicador" = input$indicador)
})
shiny::renderPlot({
ggplot2::ggplot(prepara_componentes)+
ggplot2::aes(x=date,y=indicador)+
ggplot2::geom_line()
}
)
library(ggplot)
library(ggplot2)
# Carrega pacotes
library(readr)
library(shiny)
library(ggplot2)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
View(dados)
# Inputs
shiny::selectInput(
inputId = "indicador",
label = shiny::strong("indicador"),
choices = colnames(dados)[-1],
selected='IPCA',
multiple = FALSE
)
shiny::dateRangeInput(
inputId="datas",
label=shiny::strong("Data inicial e final:"),
start=dados$date[1],
end=max(dados$date),
min=dados$date[1],
max=max(dados$date),
format="mm/yyyy",
startview = "year",
language="pt-BR",
separator=" - "
)
shiny::numericInput(
inputId="ano",
label=shiny::strong("Comparar com o ano"),
value=max(lubridate::year(dados$date)),
min=min(lubridate::year(dados$date)),
max=max(lubridate::year(dados$date)),
step=1L
)
shiny::checkboxGroupInput(
inputId="Componentes",
label=shiny::strong("Componentes"),
choices=c("% a.m.","Tendência","Sazonalidade","Média"),
selected=c("% a.m.","Tendência","Média")
)
prepara_componentes <- shiny::reactive({
dados |>
dplyr::select("date", "indicador" = input$indicador) |>
dplyr::filter(date>=input$datas[1] & date <= input$datas[2])
})
shiny::renderPlot({
ggplot2::ggplot(prepara_componentes)+
ggplot2::aes(x = date, y = indicador)+
ggplot2::geom_line()
}
)
View(dados)
prepara_componentes <- shiny::reactive({
dados |>
dplyr::select("date", "indicador" = input$indicador) |>
dplyr::filter(date>=input$datas[1] & date <= input$datas[2])
})
View(dados)
library(fabletools)
install.packages('fabletools')
library(feasts)
install.packages('feasts')
library(readr)
library(lubridate)
library(shiny)
library(ggplot2)
library(dplyr)
library(tsibble)
library(fabletools)
library(feasts)
# Carrega pacotes
library(readr)
library(lubridate)
library(ggplot2)
library(tsibble)
library(feasts)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
library(tidyr)
View(dados)
prepara_componentes <- shiny::reactive({
dados |>
dplyr::select("date", "indicador" = input$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2]) |>
dplyr::mutate(date=tsibble::yearmonth(date)) |>
tsibble::as_tsibble(index="date") |>
tidyr::drop_na() |>
fabletools::model(feasts::STL(indicador, robust=TRUE))|>
fabletools::components() |>
tsibble::as_tsibble() |>
dplyr::mutate(
date=lubridate::as_date(date),
media = mean(indicador)
) |>
dplyr::select(
"date",
"% a.m."="indicador",
"Tendência" = "trend",
"Sazonalidade" = "season_year",
"Média" = "media") |>
tidyr::pivot_longer(
cols=-"date",
names_to = "componentes",
values_to = "valor"
)
})
prepara_componentes()
install.packages('stringr')
install.packages("stringr")
library(stringr)
stringr::str_pad(
string=lubridate::month(input$datas[1]),
width=2,
side='left',
pad=0
)
stringr::str_pad(
string=lubridate::month("2003-01-01"),
width=2,
side='left',
pad=0
)
stringr::str_pad(
string=lubridate::month("2003-02-01"),
width=2,
side='left',
pad=0
)
??ggplot
??stl
prepara_sazonalidade <- shiny::reactive({
dados|>
dplyr::select("date","indicador"=inpu$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2])
})
shiny::renderPlot({
ggplot2::ggplot(prepara_sazonalidade()) +
ggplot2::aes(x=date,y=indicador)+
ggplot2::geom_line()
})
prepara_sazonalidade <- shiny::reactive({
dados|>
dplyr::select("date","indicador"=inpu$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2])
})
shiny::renderPlot({
ggplot2::ggplot(prepara_sazonalidade()) +
ggplot2::aes(x=date,y=indicador)+
ggplot2::geom_line()
})
# Carrega pacotes
library(readr)
library(lubridate)
library(shiny)
library(ggplot2)
library(dplyr)
library(tsibble)
library(fabletools)
library(feasts)
library(tidyr)
library(stringr)
library(lubridate)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
# Inputs
shiny::selectInput(
inputId = "indicador",
label = shiny::strong("indicador"),
choices = colnames(dados)[-1],
selected='IPCA',
multiple = FALSE
)
shiny::dateRangeInput(
inputId="datas",
label=shiny::strong("Data inicial e final:"),
start=dados$date[1],
end=max(dados$date),
min=dados$date[1],
max=max(dados$date),
format="mm/yyyy",
startview = "year",
language="pt-BR",
separator=" - "
)
shiny::numericInput(
inputId="ano",
label=shiny::strong("Comparar com o ano"),
value=max(lubridate::year(dados$date)),
min=min(lubridate::year(dados$date)),
max=max(lubridate::year(dados$date)),
step=1L
)
shiny::checkboxGroupInput(
inputId="componentes",
label=shiny::strong("componentes"),
choices=c("% a.m.","Tendência","Sazonalidade","Média"),
selected=c("% a.m.","Tendência","Média")
)
prepara_sazonalidade <- shiny::reactive({
dados|>
dplyr::select("date","indicador"=inpu$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2])
})
shiny::renderPlot({
ggplot2::ggplot(prepara_sazonalidade()) +
ggplot2::aes(x=date,y=indicador)+
ggplot2::geom_line()
})
??shiny::reactive
library(Hmisc)
install.packages('Hmisc')
library(Hmisc)
library(hmisc)
install.packages('hmisk')
library(misc)
library(hmisc)
library(Hmisc)
# Carrega pacotes
library(readr)
library(lubridate)
library(shiny)
library(dplyr)
library(tsibble)
library(feasts)
library(tidyr)
library(lubridate)
library(Hmisc)
# Carrega dados
dados <- readr::read_csv("/cloud/project/dados_tratados.csv")
# Inputs
shiny::selectInput(
inputId = "indicador",
label = shiny::strong("indicador"),
choices = colnames(dados)[-1],
selected='IPCA',
multiple = FALSE
)
shiny::dateRangeInput(
inputId="datas",
label=shiny::strong("Data inicial e final:"),
start=dados$date[1],
end=max(dados$date),
min=dados$date[1],
max=max(dados$date),
format="mm/yyyy",
startview = "year",
language="pt-BR",
separator=" - "
)
shiny::checkboxGroupInput(
inputId="componentes",
label=shiny::strong("componentes"),
choices=c("% a.m.","Tendência","Sazonalidade","Média"),
selected=c("% a.m.","Tendência","Média")
)
```{r}
prepara_sazonalidade <- shiny::reactive({
dados |>
dplyr::select("date","indicador"=input$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2]) |>
dplyr::group_by(mes=libridate::month(x=date, label=TRUE, abbr=TRUE)) |>
dplyr::summarise(
estatisticas=ggplot2::median_hilow(indicador,conf.int=0.5)
) |>
tidyr::unnest("estatisticas") |>
dplyr::left_join(
y=dados |>
dplyr::select("mes"="date","indicador"=input$indicador) |>
dplyr::filter(lubridate::year(date ==input$ano) |>
dplyr::mutate(
mes=lubridate::month(x=mes,label=TRUE, abbr=TRUE)
),
by="mes"
)
})
prepara_sazonalidade <- shiny::reactive({
dados |>
dplyr::select("date","indicador"=input$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2]) |>
dplyr::group_by(mes=libridate::month(x=date, label=TRUE, abbr=TRUE))
prepara_sazonalidade <- shiny::reactive({
dados |>
dplyr::select("date","indicador"=input$indicador) |>
dplyr::filter(date >= input$datas[1] & date <= input$datas[2]) |>
dplyr::group_by(mes=libridate::month(x=date, label=TRUE, abbr=TRUE)) |>
dplyr::summarise(
estatisticas=ggplot2::median_hilow(indicador,conf.int  =0.5)
View(dados)
install.packages('rsconect')
install.packages("rsconect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='rwtwa1-marcos-roberto0pinto',
token='65FCB151FF05A2D0FA5174E6D9FBAB74',
secret='hJ9Hms7AowFmFaRJG38Qm8oYri66jPJfNOlHf8fj')
getwd()
setwd("/cloud/project/inflacao")
rsconnect::deployApp(appName="dash_inflacao")
setwd("/cloud/project/inflacao")
rsconnect::deployApp(appName="dash_inflacao")
getwd()
rsconnect::deployApp(appName="dash_inflacao")
rsconnect::deployApp(appName="dash_inflacao")
getwd()
setwd("/cloud/project")
rsconnect::deployApp(appName="dash_inflacao")
